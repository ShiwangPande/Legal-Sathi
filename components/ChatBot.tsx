"use client";

import { useState, useRef, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { MessageSquare, X, Send, Volume2, VolumeX, Loader2, Globe, AlertCircle, Copy, RefreshCw, Star, Settings, Minimize2, Maximize2, Bot, User, ChevronDown, ThumbsUp, ThumbsDown } from "lucide-react";
import { cn } from "@/lib/utils";

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
  rating?: 'up' | 'down' | null;
}

const LANGUAGES = [
  { code: 'en', name: 'English', flag: 'ЁЯЗ║ЁЯЗ╕' },
  { code: 'hi', name: 'рд╣рд┐рдВрджреА', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'bn', name: 'ржмрж╛ржВрж▓рж╛', flag: 'ЁЯЗзЁЯЗй' },
  { code: 'gu', name: 'ркЧрлБркЬрк░рк╛ркдрлА', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'kn', name: 'р▓Хр▓ир│Нр▓ир▓б', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'ml', name: 'р┤ор┤▓р┤пр┤╛р┤│р┤В', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'mr', name: 'рдорд░рд╛рдареА', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'pa', name: 'рикрй░риЬри╛римрйА', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'ta', name: 'родрооро┐ро┤рпН', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'te', name: 'р░др▒Жр░▓р▒Бр░Чр▒Б', flag: 'ЁЯЗоЁЯЗ│' },
];

const SAMPLE_QUESTIONS = {
  en: [
    "What are minimum wage rates in India?",
    "How many hours can I work per day legally?",
    "What are my rights during termination?",
    "How to file complaint against employer?",
    "What benefits am I entitled to?",
    "How to handle workplace harassment?",
    "What is notice period requirement?"
  ],
  hi: [
    "рднрд╛рд░рдд рдореЗрдВ рдиреНрдпреВрдирддрдо рдордЬрджреВрд░реА рджрд░ рдХреНрдпрд╛ рд╣реИ?",
    "рдореИрдВ рдХрд╛рдиреВрдиреА рд░реВрдк рд╕реЗ рдкреНрд░рддрд┐ рджрд┐рди рдХрд┐рддрдиреЗ рдШрдВрдЯреЗ рдХрд╛рдо рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ?",
    "рд╕рдорд╛рдкреНрддрд┐ рдХреЗ рджреМрд░рд╛рди рдореЗрд░реЗ рдЕрдзрд┐рдХрд╛рд░ рдХреНрдпрд╛ рд╣реИрдВ?",
    "рдирд┐рдпреЛрдХреНрддрд╛ рдХреЗ рдЦрд┐рд▓рд╛рдл рд╢рд┐рдХрд╛рдпрдд рдХреИрд╕реЗ рджрд░реНрдЬ рдХрд░реЗрдВ?",
    "рдореИрдВ рдХрд┐рди рд▓рд╛рднреЛрдВ рдХрд╛ рд╣рдХрджрд╛рд░ рд╣реВрдВ?",
    "рдХрд╛рд░реНрдпрдХреНрд╖реЗрддреНрд░ рдореЗрдВ рдЙрддреНрдкреАрдбрд╝рди рд╕реЗ рдХреИрд╕реЗ рдирд┐рдкрдЯреЗрдВ?",
    "рдиреЛрдЯрд┐рд╕ рдЕрд╡рдзрд┐ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рдХреНрдпрд╛ рд╣реИ?"
  ],
  bn: [
    "ржнрж╛рж░рждрзЗ рж╕рж░рзНржмржирж┐ржорзНржи ржоржЬрзБрж░рж┐рж░ рж╣рж╛рж░ ржХржд?",
    "ржЖржорж┐ ржЖржЗржиржд ржкрзНрж░рждрж┐ржжрж┐ржи ржХржд ржШржирзНржЯрж╛ ржХрж╛ржЬ ржХрж░рждрзЗ ржкрж╛рж░рж┐?",
    "ржЪрж╛ржХрж░рж┐ ржЕржмрж╕рж╛ржирзЗрж░ рж╕ржоржпрж╝ ржЖржорж╛рж░ ржЕржзрж┐ржХрж╛рж░ржЧрзБрж▓рж┐ ржХрзА?",
    "ржирж┐ржпрж╝рзЛржЧржХрж░рзНрждрж╛рж░ ржмрж┐рж░рзБржжрзНржзрзЗ ржЕржнрж┐ржпрзЛржЧ ржХрзАржнрж╛ржмрзЗ ржжрж╛ржпрж╝рзЗрж░ ржХрж░ржм?",
    "ржЖржорж┐ ржХрзА рж╕рзБржмрж┐ржзрж╛ ржкрж╛ржУржпрж╝рж╛рж░ ржЕржзрж┐ржХрж╛рж░рзА?",
    "ржХрж░рзНржоржХрзНрж╖рзЗрждрзНрж░рзЗ рж╣ржпрж╝рж░рж╛ржирж┐ ржХрзАржнрж╛ржмрзЗ ржорзЛржХрж╛ржмрзЗрж▓рж╛ ржХрж░ржм?",
    "ржирзЛржЯрж┐рж╢ ржкрж┐рж░рж┐ржпрж╝ржбрзЗрж░ ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝рждрж╛ ржХрзА?"
  ],
  gu: [
    "ркнрк╛рк░ркдркорк╛ркВ рк▓ркШрлБркдрлНркдрко рк╡рлЗркдрки ркжрк░ рк╢рлБркВ ркЫрлЗ?",
    "рк╣рлБркВ ркХрк╛ркпркжрлЗрк╕рк░ рк░рлАркдрлЗ ркжрк░рк░рлЛркЬ ркХрлЗркЯрк▓рк╛ ркХрк▓рк╛ркХ ркХрк╛рко ркХрк░рлА рк╢ркХрлБркВ?",
    "ркЯрк░рлНркорк┐ркирлЗрк╢рки ркжрк░ркорк┐ркпрк╛рки ркорк╛рк░рк╛ ркЕркзрк┐ркХрк╛рк░рлЛ рк╢рлБркВ ркЫрлЗ?",
    "ркПркорлНрккрлНрк▓рлЛркпрк░ рк╕рк╛ркорлЗ рклрк░рк┐ркпрк╛ркж ркХрлЗрк╡рлА рк░рлАркдрлЗ ркирлЛркВркзрк╛рк╡рлБркВ?",
    "рк╣рлБркВ ркХркпрк╛ рк▓рк╛ркнрлЛркирлЛ рк╣ркХркжрк╛рк░ ркЫрлБркВ?",
    "ркХрк╛рк░рлНркпрк╕рлНркерк│ рккрк░ рк╣рлЗрк░рк╛ркиркЧркдрк┐ рк╕рк╛ркерлЗ ркХрлЗрк╡рлА рк░рлАркдрлЗ рк╡рлНркпрк╡рк╣рк╛рк░ ркХрк░рк╡рлЛ?",
    "ркирлЛркЯрк┐рк╕ рккрлАрк░рк┐ркпркбркирлА ркЬрк░рлВрк░рк┐ркпрк╛ркд рк╢рлБркВ ркЫрлЗ?"
  ],
  kn: [
    "р▓нр▓╛р▓░р▓др▓жр▓▓р│Нр▓▓р▓┐ р▓Хр▓ир▓┐р▓╖р│Нр▓а р▓╡р│Зр▓др▓и р▓жр▓░р▓Чр▓│р│Б р▓Пр▓ир│Б?",
    "р▓ир▓╛р▓ир│Б р▓Хр▓╛р▓ир│Вр▓ир│Бр▓мр▓жр│Нр▓зр▓╡р▓╛р▓Чр▓┐ р▓жр▓┐р▓ир▓Хр│Нр▓Хр│Ж р▓Ор▓╖р│Нр▓Яр│Б р▓Чр▓Вр▓Яр│Жр▓Чр▓│р│Б р▓Хр│Жр▓▓р▓╕ р▓ор▓╛р▓бр▓мр▓╣р│Бр▓жр│Б?",
    "р▓Йр▓жр│Нр▓пр│Лр▓Ч р▓Хр│Кр▓ир│Жр▓Чр│Кр▓│р▓┐р▓╕р│Бр▓╡ р▓╕р▓ор▓пр▓жр▓▓р│Нр▓▓р▓┐ р▓ир▓ир│Нр▓и р▓╣р▓Хр│Нр▓Хр│Бр▓Чр▓│р│Б р▓Пр▓ир│Б?",
    "р▓Йр▓жр│Нр▓пр│Лр▓Чр▓жр▓╛р▓др▓░ р▓╡р▓┐р▓░р│Бр▓жр│Нр▓з р▓жр│Вр▓░р│Б р▓╣р│Зр▓Чр│Ж р▓жр▓╛р▓Цр▓▓р▓┐р▓╕р│Бр▓╡р│Бр▓жр│Б?",
    "р▓ир▓╛р▓ир│Б р▓пр▓╛р▓╡ р▓кр│Нр▓░р▓пр│Лр▓Ьр▓ир▓Чр▓│р▓┐р▓Чр│Ж р▓Ер▓░р│Нр▓╣р▓ир▓╛р▓Чр▓┐р▓жр│Нр▓жр│Зр▓ир│Ж?",
    "р▓Хр▓╛р▓░р│Нр▓пр▓Хр│Нр▓╖р│Зр▓др│Нр▓░р▓ж р▓Хр▓┐р▓░р│Бр▓Хр│Бр▓│р▓╡р▓ир│Нр▓ир│Б р▓╣р│Зр▓Чр│Ж р▓ир▓┐р▓нр▓╛р▓пр▓┐р▓╕р│Бр▓╡р│Бр▓жр│Б?",
    "р▓ир│Лр▓Яр▓┐р▓╕р│Н р▓Ер▓╡р▓зр▓┐р▓п р▓Ер▓╡р▓╢р│Нр▓пр▓Хр▓др│Ж р▓Пр▓ир│Б?"
  ],
  ml: [
    "р┤Зр┤ир╡Нр┤др╡Нр┤пр┤пр┤┐р╡╜ р┤ор┤┐р┤ир┤┐р┤ор┤В р┤╡р╡Зр┤др┤и р┤ир┤┐р┤░р┤Хр╡Нр┤Хр╡Бр┤Хр╡╛ р┤Ор┤ир╡Нр┤др┤╛р┤гр╡Н?",
    "р┤ир┤┐р┤пр┤ор┤кр╡Нр┤░р┤Хр┤╛р┤░р┤В р┤Тр┤░р╡Б р┤жр┤┐р┤╡р┤╕р┤В р┤Ор┤др╡Нр┤░ р┤ор┤гр┤┐р┤Хр╡Нр┤Хр╡Вр╡╝ р┤Ьр╡Лр┤▓р┤┐ р┤Ър╡Жр┤пр╡Нр┤пр┤╛р┤В?",
    "р┤Ьр╡Лр┤▓р┤┐ р┤Ер┤╡р┤╕р┤╛р┤ир┤┐р┤кр╡Нр┤кр┤┐р┤Хр╡Нр┤Хр╡Бр┤ор╡Нр┤кр╡Лр╡╛ р┤Ор┤ир╡Нр┤▒р╡Ж р┤Ер┤╡р┤Хр┤╛р┤╢р┤Щр╡Нр┤Щр╡╛ р┤Ор┤ир╡Нр┤др╡Кр┤Хр╡Нр┤Хр╡Жр┤пр┤╛р┤гр╡Н?",
    "р┤др╡Кр┤┤р┤┐р┤▓р╡Бр┤Яр┤ор┤пр╡НтАМр┤Хр╡Нр┤Хр╡Жр┤др┤┐р┤░р╡Ж р┤кр┤░р┤╛р┤др┤┐ р┤Ор┤Щр╡Нр┤Щр┤ир╡Ж р┤лр┤пр╡╜ р┤Ър╡Жр┤пр╡Нр┤пр┤╛р┤В?",
    "р┤Ор┤ир┤┐р┤Хр╡Нр┤Хр╡Н р┤Ор┤ир╡Нр┤др╡Н р┤Жр┤ир╡Бр┤Хр╡Вр┤▓р╡Нр┤пр┤Щр╡Нр┤Щр╡╛р┤Хр╡Нр┤Хр╡Н р┤Ер╡╝р┤╣р┤др┤пр╡Бр┤гр╡Нр┤Яр╡Н?",
    "р┤Ьр╡Лр┤▓р┤┐р┤╕р╡Нр┤ер┤▓р┤др╡Нр┤др╡Ж р┤кр╡Ар┤бр┤ир┤В р┤Ор┤Щр╡Нр┤Щр┤ир╡Ж р┤Хр╡Ир┤Хр┤╛р┤░р╡Нр┤пр┤В р┤Ър╡Жр┤пр╡Нр┤пр┤╛р┤В?",
    "р┤ир╡Лр┤Яр╡Нр┤Яр╡Ар┤╕р╡Н р┤Хр┤╛р┤▓р┤пр┤│р┤╡р┤┐р┤ир╡Нр┤▒р╡Ж р┤Жр┤╡р┤╢р╡Нр┤пр┤Хр┤д р┤Ор┤ир╡Нр┤др┤╛р┤гр╡Н?"
  ],
  mr: [
    "рднрд╛рд░рддрд╛рдд рдХрд┐рдорд╛рди рд╡реЗрддрди рджрд░ рдХрд╛рдп рдЖрд╣реЗрдд?",
    "рдореА рдХрд╛рдпрджреЗрд╢реАрд░рд░рд┐рддреНрдпрд╛ рджрд┐рд╡рд╕рднрд░ рдХрд┐рддреА рддрд╛рд╕ рдХрд╛рдо рдХрд░реВ рд╢рдХрддреЛ?",
    "рдиреЛрдХрд░реА рд╕рдВрдкреБрд╖реНрдЯрд╛рдд рдЖрдгрддрд╛рдирд╛ рдорд╛рдЭреЗ рдЕрдзрд┐рдХрд╛рд░ рдХрд╛рдп рдЖрд╣реЗрдд?",
    "рдирд┐рдпреЛрдХреНрддреНрдпрд╛рд╡рд┐рд░реБрджреНрдз рддрдХреНрд░рд╛рд░ рдХрд╢реА рдиреЛрдВрджрд╡рд╛рдпрдЪреА?",
    "рдореА рдХреЛрдгрддреНрдпрд╛ рдлрд╛рдпрджреНрдпрд╛рдВрд╕рд╛рдареА рдкрд╛рддреНрд░ рдЖрд╣реЗ?",
    "рдХрд╛рдорд╛рдЪреНрдпрд╛ рдард┐рдХрд╛рдгреА рдЫрд│рд╡рдгреВрдХ рдХрд╢реА рд╣рд╛рддрд╛рд│рд╛рдпрдЪреА?",
    "рдиреЛрдЯреАрд╕ рдХрд╛рд▓рд╛рд╡рдзреАрдЪреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рдХрд╛рдп рдЖрд╣реЗ?"
  ],
  pa: [
    "ринри╛ри░рид ри╡ри┐рй▒риЪ риШрй▒риЯрйЛ-риШрй▒риЯ риориЬри╝рижрйВри░рйА рижри░ риХрйА ри╣рии?",
    "риорйИриВ риХри╛риирйВрй░риирйА ридрйМри░ 'ридрйЗ рижри┐рии ри╡ри┐рй▒риЪ риХри┐рй░риирйЗ риШрй░риЯрйЗ риХрй░рио риХри░ ри╕риХрижри╛ ри╣ри╛риВ?",
    "риирйМриХри░рйА риЦридрио риХри░рии рижрйМри░ри╛рии риорйЗри░рйЗ риЕризри┐риХри╛ри░ риХрйА ри╣рии?",
    "риори╛ри▓риХ рижрйЗ риЦри┐ри▓ри╛рилри╝ ри╕ри╝ри┐риХри╛риЗрид риХри┐р╡╡рйЗриВ рижри░риЬри╝ риХри░ри╛риВ?",
    "риорйИриВ риХри┐ри╣рйЬрйЗ ри▓ри╛ринри╛риВ рижри╛ ри╣рй▒риХрижри╛ри░ ри╣ри╛риВ?",
    "риХрй░рио рижрйА риЬриЧрйНри╣ри╛ 'ридрйЗ рикри░рйЗри╕ри╝ри╛риирйА риири╛ри▓ риХри┐р╡╝риири╛ риЬри╛ри╡рйЗ?",
    "риирйЛриЯри┐ри╕ риори┐риЖриж рижрйА ри▓рйЛрйЬ риХрйА ри╣рйИ?"
  ],
  ta: [
    "роЗроирпНродро┐ропро╛ро╡ро┐ро▓рпН роХрпБро▒рпИроирпНродрокроЯрпНроЪ роКродро┐роп ро╡ро┐роХро┐родроЩрпНроХро│рпН роОройрпНрой?",
    "роиро╛ройрпН роЪроЯрпНроЯрокрпНрокроЯро┐ роТро░рпБ роиро╛ро│ро┐ро▓рпН роОродрпНродройрпИ роорогро┐ роирпЗро░роорпН ро╡рпЗро▓рпИ роЪрпЖропрпНропро▓ро╛роорпН?",
    "ро╡рпЗро▓рпИ роиро┐ро▒рпБродрпНродродрпНродро┐ройрпН рокрпЛродрпБ роОройродрпБ роЙро░ро┐роорпИроХро│рпН роОройрпНрой?",
    "роорпБродро▓ро╛ро│ро┐роХрпНроХрпБ роОродро┐ро░ро╛роХ рокрпБроХро╛ро░рпН роОрокрпНрокроЯро┐ рокродро┐ро╡рпБ роЪрпЖропрпНро╡родрпБ?",
    "роиро╛ройрпН роОроирпНрод роиройрпНроорпИроХро│рпБроХрпНроХрпБ родроХрпБродро┐ропро╛ройро╡ройрпН?",
    "рокрогро┐ропро┐роЯ родрпБройрпНрокрпБро▒рпБродрпНродро▓рпИ роОрокрпНрокроЯро┐ роХрпИропро╛ро│рпНро╡родрпБ?",
    "роЕро▒ро┐ро╡ро┐рокрпНрокрпБ роХро╛ро▓родрпНродро┐ройрпН родрпЗро╡рпИ роОройрпНрой?"
  ],
  te: [
    "р░нр░╛р░░р░др░жр▒Зр░╢р░Вр░▓р▒Л р░Хр░ир▒Ар░╕ р░╡р▒Зр░др░и р░░р▒Зр░Яр▒Нр░▓р▒Б р░Пр░ор░┐р░Яр░┐?",
    "р░ир▒Зр░ир▒Б р░Ър░Яр▒Нр░Яр░мр░жр▒Нр░зр░Вр░Чр░╛ р░░р▒Лр░Ьр▒Бр░Хр▒Б р░Ор░ир▒Нр░ир░┐ р░Чр░Вр░Яр░▓р▒Б р░кр░ир░┐ р░Ър▒Зр░пр░Чр░▓р░ир▒Б?",
    "р░Йр░жр▒Нр░пр▒Лр░Чр░В р░ор▒Бр░Чр░┐р░╕р▒З р░╕р░ор░пр░Вр░▓р▒Л р░ир░╛ р░╣р░Хр▒Нр░Хр▒Бр░▓р▒Б р░Пр░ор░┐р░Яр░┐?",
    "р░пр░Ьр░ор░╛р░ир░┐р░кр▒И р░лр░┐р░░р▒Нр░пр░╛р░жр▒Б р░Ор░▓р░╛ р░жр░╛р░Цр░▓р▒Б р░Ър▒Зр░пр░╛р░▓р░┐?",
    "р░ир▒Зр░ир▒Б р░П р░кр▒Нр░░р░пр▒Лр░Ьр░ир░╛р░▓р░Хр▒Б р░Ер░░р▒Нр░╣р▒Бр░бр░ир▒Б?",
    "р░Хр░╛р░░р▒Нр░пр░╛р░▓р░пр░Вр░▓р▒Л р░╡р▒Зр░зр░┐р░Вр░кр▒Бр░▓р░ир▒Б р░Ор░▓р░╛ р░кр░░р░┐р░╖р▒Нр░Хр░░р░┐р░Вр░Ър░╛р░▓р░┐?",
    "р░ир▒Лр░Яр▒Ар░╕р▒Б р░╡р▒Нр░пр░╡р░зр░┐ р░Ер░╡р░╕р░░р░В р░Пр░ор░┐р░Яр░┐?"
  ]
};

const LEGAL_TOPICS = {
  en: [
    { icon: "тЪЦя╕П", title: "Labor Rights", desc: "Working hours, wages, conditions" },
    { icon: "ЁЯПв", title: "Employment Law", desc: "Hiring, termination, contracts" },
    { icon: "ЁЯЫбя╕П", title: "Workplace Safety", desc: "Harassment, discrimination, safety" },
    { icon: "ЁЯТ░", title: "Compensation", desc: "Salary, benefits, bonuses" },
    { icon: "ЁЯУЛ", title: "Legal Procedures", desc: "Filing complaints, documentation" },
    { icon: "ЁЯОп", title: "Rights & Duties", desc: "Employee rights and obligations" }
  ],
  hi: [
    { icon: "тЪЦя╕П", title: "рд╢реНрд░рдо рдЕрдзрд┐рдХрд╛рд░", desc: "рдХрд╛рд░реНрдп рдШрдВрдЯреЗ, рдордЬрджреВрд░реА, рд╕реНрдерд┐рддрд┐рдпрд╛рдВ" },
    { icon: "ЁЯПв", title: "рд░реЛрдЬрдЧрд╛рд░ рдХрд╛рдиреВрди", desc: "рднрд░реНрддреА, рд╕рдорд╛рдкреНрддрд┐, рдЕрдиреБрдмрдВрдз" },
    { icon: "ЁЯЫбя╕П", title: "рдХрд╛рд░реНрдпрдХреНрд╖реЗрддреНрд░ рд╕реБрд░рдХреНрд╖рд╛", desc: "рдЙрддреНрдкреАрдбрд╝рди, рднреЗрджрднрд╛рд╡, рд╕реБрд░рдХреНрд╖рд╛" },
    { icon: "ЁЯТ░", title: "рдореБрдЖрд╡рдЬрд╛", desc: "рд╡реЗрддрди, рд▓рд╛рдн, рдмреЛрдирд╕" },
    { icon: "ЁЯУЛ", title: "рдХрд╛рдиреВрдиреА рдкреНрд░рдХреНрд░рд┐рдпрд╛рдПрдВ", desc: "рд╢рд┐рдХрд╛рдпрдд рджрд░реНрдЬ рдХрд░рдирд╛, рдкреНрд░рд▓реЗрдЦрди" },
    { icon: "ЁЯОп", title: "рдЕрдзрд┐рдХрд╛рд░ рдФрд░ рдХрд░реНрддрд╡реНрдп", desc: "рдХрд░реНрдордЪрд╛рд░реА рдЕрдзрд┐рдХрд╛рд░ рдФрд░ рджрд╛рдпрд┐рддреНрд╡" }
  ],
  bn: [
    { icon: "тЪЦя╕П", title: "рж╢рзНрж░ржо ржЕржзрж┐ржХрж╛рж░", desc: "ржХрж╛ржЬрзЗрж░ рж╕ржоржпрж╝, ржоржЬрзБрж░рж┐, рж╢рж░рзНрждрж╛ржмрж▓рзА" },
    { icon: "ЁЯПв", title: "ржХрж░рзНржорж╕ржВрж╕рзНржерж╛ржи ржЖржЗржи", desc: "ржирж┐ржпрж╝рзЛржЧ, ржЕржмрж╕рж╛ржи, ржЪрзБржХрзНрждрж┐" },
    { icon: "ЁЯЫбя╕П", title: "ржХрж░рзНржоржХрзНрж╖рзЗрждрзНрж░ ржирж┐рж░рж╛ржкрждрзНрждрж╛", desc: "рж╣ржпрж╝рж░рж╛ржирж┐, ржмрзИрж╖ржорзНржп, ржирж┐рж░рж╛ржкрждрзНрждрж╛" },
    { icon: "ЁЯТ░", title: "ржХрзНрж╖рждрж┐ржкрзВрж░ржг", desc: "ржмрзЗрждржи, рж╕рзБржмрж┐ржзрж╛, ржмрзЛржирж╛рж╕" },
    { icon: "ЁЯУЛ", title: "ржЖржЗржирж┐ ржкржжрзНржзрждрж┐", desc: "ржЕржнрж┐ржпрзЛржЧ ржжрж╛ржпрж╝рзЗрж░, ржкрзНрж░ржорж╛ржгржкрждрзНрж░" },
    { icon: "ЁЯОп", title: "ржЕржзрж┐ржХрж╛рж░ ржУ ржХрж░рзНрждржмрзНржп", desc: "ржХрж░рзНржоржЪрж╛рж░рзА ржЕржзрж┐ржХрж╛рж░ ржПржмржВ ржжрж╛ржпрж╝ржмржжрзНржзрждрж╛" }
  ],
  gu: [
    { icon: "тЪЦя╕П", title: "рк╢рлНрк░рко ркЕркзрк┐ркХрк╛рк░рлЛ", desc: "ркХрк╛ркоркирк╛ ркХрк▓рк╛ркХрлЛ, рк╡рлЗркдрки, рк╢рк░ркдрлЛ" },
    { icon: "ЁЯПв", title: "рк░рлЛркЬркЧрк╛рк░ ркХрк╛ркпркжрлЛ", desc: "ркирк┐ркоркгрлВркХ, рк╕ркорк╛рккрлНркдрк┐, ркХрк░рк╛рк░" },
    { icon: "ЁЯЫбя╕П", title: "ркХрк╛рк░рлНркпрк╕рлНркерк│ рк╕рлБрк░ркХрлНрк╖рк╛", desc: "рк╣рлЗрк░рк╛ркиркЧркдрк┐, ркнрлЗркжркнрк╛рк╡, рк╕рлБрк░ркХрлНрк╖рк╛" },
    { icon: "ЁЯТ░", title: "рк╡рк│ркдрк░", desc: "рккркЧрк╛рк░, рк▓рк╛ркнрлЛ, ркмрлЛркирк╕" },
    { icon: "ЁЯУЛ", title: "ркХрк╛ркирлВркирлА рккрлНрк░ркХрлНрк░рк┐ркпрк╛ркУ", desc: "рклрк░рк┐ркпрк╛ркж ркирлЛркВркзрк╛рк╡рк╡рлА, ркжрк╕рлНркдрк╛рк╡рлЗркЬрлАркХрк░ркг" },
    { icon: "ЁЯОп", title: "ркЕркзрк┐ркХрк╛рк░рлЛ ркЕркирлЗ рклрк░ркЬрлЛ", desc: "ркХрк░рлНркоркЪрк╛рк░рлА ркЕркзрк┐ркХрк╛рк░рлЛ ркЕркирлЗ ркЬрк╡рк╛ркмркжрк╛рк░рлАркУ" }
  ],
  kn: [
    { icon: "тЪЦя╕П", title: "р▓Хр▓╛р▓░р│Нр▓ор▓┐р▓Х р▓╣р▓Хр│Нр▓Хр│Бр▓Чр▓│р│Б", desc: "р▓Хр│Жр▓▓р▓╕р▓ж р▓╕р▓ор▓п, р▓╡р│Зр▓др▓и, р▓╖р▓░р▓др│Нр▓др│Бр▓Чр▓│р│Б" },
    { icon: "ЁЯПв", title: "р▓Йр▓жр│Нр▓пр│Лр▓Ч р▓Хр▓╛р▓ир│Вр▓ир│Б", desc: "р▓ир│Зр▓ор▓Хр▓╛р▓др▓┐, р▓ор│Бр▓Хр│Нр▓др▓╛р▓п, р▓Тр▓кр│Нр▓кр▓Вр▓жр▓Чр▓│р│Б" },
    { icon: "ЁЯЫбя╕П", title: "р▓Хр▓╛р▓░р│Нр▓пр▓Хр│Нр▓╖р│Зр▓др│Нр▓░ р▓╕р│Бр▓░р▓Хр│Нр▓╖р▓др│Ж", desc: "р▓Хр▓┐р▓░р│Бр▓Хр│Бр▓│, р▓др▓╛р▓░р▓др▓ор│Нр▓п, р▓╕р│Бр▓░р▓Хр│Нр▓╖р▓др│Ж" },
    { icon: "ЁЯТ░", title: "р▓кр▓░р▓┐р▓╣р▓╛р▓░", desc: "р▓╕р▓Вр▓мр▓│, р▓кр│Нр▓░р▓пр│Лр▓Ьр▓ир▓Чр▓│р│Б, р▓мр│Лр▓ир▓╕р│Н" },
    { icon: "ЁЯУЛ", title: "р▓Хр▓╛р▓ир│Вр▓ир│Б р▓Хр▓╛р▓░р│Нр▓пр▓╡р▓┐р▓зр▓╛р▓ир▓Чр▓│р│Б", desc: "р▓жр│Вр▓░р│Б р▓жр▓╛р▓Цр▓▓р▓┐р▓╕р│Бр▓╡р│Бр▓жр│Б, р▓жр▓╛р▓Цр▓▓р│Ар▓Хр▓░р▓г" },
    { icon: "ЁЯОп", title: "р▓╣р▓Хр│Нр▓Хр│Бр▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓Хр▓░р│Нр▓др▓╡р│Нр▓пр▓Чр▓│р│Б", desc: "р▓Йр▓жр│Нр▓пр│Лр▓Чр▓┐ р▓╣р▓Хр│Нр▓Хр│Бр▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓Ьр▓╡р▓╛р▓мр│Нр▓жр▓╛р▓░р▓┐р▓Чр▓│р│Б" }
  ],
  ml: [
    { icon: "тЪЦя╕П", title: "р┤др╡Кр┤┤р┤┐р╡╜ р┤Ер┤╡р┤Хр┤╛р┤╢р┤Щр╡Нр┤Щр╡╛", desc: "р┤Ьр╡Лр┤▓р┤┐ р┤╕р┤ор┤пр┤В, р┤╡р╡Зр┤др┤ир┤В, р┤╡р╡Нр┤пр┤╡р┤╕р╡Нр┤ер┤Хр╡╛" },
    { icon: "ЁЯПв", title: "р┤др╡Кр┤┤р┤┐р╡╜ р┤ир┤┐р┤пр┤ор┤В", desc: "р┤ир┤┐р┤пр┤ор┤ир┤В, р┤Ер┤╡р┤╕р┤╛р┤ир┤┐р┤кр╡Нр┤кр┤┐р┤Хр╡Нр┤Хр╡╜, р┤Хр┤░р┤╛р┤▒р╡Бр┤Хр╡╛" },
    { icon: "ЁЯЫбя╕П", title: "р┤Ьр╡Лр┤▓р┤┐р┤╕р╡Нр┤ер┤▓ р┤╕р╡Бр┤░р┤Хр╡Нр┤╖", desc: "р┤кр╡Ар┤бр┤ир┤В, р┤╡р┤┐р┤╡р╡Зр┤Ър┤ир┤В, р┤╕р╡Бр┤░р┤Хр╡Нр┤╖" },
    { icon: "ЁЯТ░", title: "р┤ир┤╖р╡Нр┤Яр┤кр┤░р┤┐р┤╣р┤╛р┤░р┤В", desc: "р┤╢р┤ор╡Нр┤кр┤│р┤В, р┤Жр┤ир╡Бр┤Хр╡Вр┤▓р╡Нр┤пр┤Щр╡Нр┤Щр╡╛, р┤мр╡Лр┤гр┤╕р╡Н" },
    { icon: "ЁЯУЛ", title: "р┤ир┤┐р┤пр┤о р┤ир┤Яр┤кр┤Яр┤┐р┤Хр╡Нр┤░р┤ор┤Щр╡Нр┤Щр╡╛", desc: "р┤кр┤░р┤╛р┤др┤┐ р┤лр┤пр╡╜ р┤Ър╡Жр┤пр╡Нр┤пр╡╜, р┤░р╡Зр┤Цр┤╛р┤ор╡Вр┤▓р┤В" },
    { icon: "ЁЯОп", title: "р┤Ер┤╡р┤Хр┤╛р┤╢р┤Щр╡Нр┤Щр┤│р╡Бр┤В р┤Хр╡╝р┤др╡Нр┤др┤╡р╡Нр┤пр┤Щр╡Нр┤Щр┤│р╡Бр┤В", desc: "р┤Ьр╡Ар┤╡р┤ир┤Хр╡Нр┤Хр┤╛р┤░р╡Бр┤Яр╡Ж р┤Ер┤╡р┤Хр┤╛р┤╢р┤Щр╡Нр┤Щр┤│р╡Бр┤В р┤мр┤╛р┤зр╡Нр┤пр┤др┤Хр┤│р╡Бр┤В" }
  ],
  mr: [
    { icon: "тЪЦя╕П", title: "рдХрд╛рдордЧрд╛рд░ рд╣рдХреНрдХ", desc: "рдХрд╛рдорд╛рдЪреЗ рддрд╛рд╕, рд╡реЗрддрди, рдЕрдЯреА" },
    { icon: "ЁЯПв", title: "рд░реЛрдЬрдЧрд╛рд░ рдХрд╛рдпрджрд╛", desc: "рдирд┐рдпреБрдХреНрддреА, рд╕рдорд╛рдкреНрддреА, рдХрд░рд╛рд░" },
    { icon: "ЁЯЫбя╕П", title: "рдХрд╛рдорд╛рдЪреНрдпрд╛ рдард┐рдХрд╛рдгрдЪреА рд╕реБрд░рдХреНрд╖рд╛", desc: "рдЫрд│рд╡рдгреВрдХ, рднреЗрджрднрд╛рд╡, рд╕реБрд░рдХреНрд╖рд╛" },
    { icon: "ЁЯТ░", title: "рднрд░рдкрд╛рдИ", desc: "рдкрдЧрд╛рд░, рдлрд╛рдпрджреЗ, рдмреЛрдирд╕" },
    { icon: "ЁЯУЛ", title: "рдХрд╛рдпрджреЗрд╢реАрд░ рдкреНрд░рдХреНрд░рд┐рдпрд╛", desc: "рддрдХреНрд░рд╛рд░ рдиреЛрдВрджрд╡рдгреЗ, рджрд╕реНрддрдРрд╡рдЬреАрдХрд░рдг" },
    { icon: "ЁЯОп", title: "рд╣рдХреНрдХ рдЖрдгрд┐ рдХрд░реНрддрд╡реНрдпреЗ", desc: "рдХрд░реНрдордЪрд╛рд░реА рд╣рдХреНрдХ рдЖрдгрд┐ рдЬрдмрд╛рдмрджрд╛рд▒реНрдпрд╛" }
  ],
  pa: [
    { icon: "тЪЦя╕П", title: "риориЬри╝рижрйВри░ ри╣рй▒риХ", desc: "риХрй░рио рижрйЗ риШрй░риЯрйЗ, ридриириЦри╛ри╣, ри╕ри╝ри░ридри╛риВ" },
    { icon: "ЁЯПв", title: "ри░рйБриЬри╝риЧри╛ри░ риХри╛риирйВрй░рии", desc: "ринри░ридрйА, ри╕риори╛рикридрйА, риЗриХри░ри╛ри░риири╛риорйЗ" },
    { icon: "ЁЯЫбя╕П", title: "риХрй░рио рижрйА риЬриЧрйНри╣ри╛ ри╕рйБри░рй▒риЦри┐риЖ", desc: "рикри░рйЗри╕ри╝ри╛риирйА, ринрйЗрижринри╛ри╡, ри╕рйБри░рй▒риЦри┐риЖ" },
    { icon: "ЁЯТ░", title: "риорйБриЖри╡риЬри╝ри╛", desc: "ридриириЦри╛ри╣, рилри╛риЗрижрйЗ, римрйЛриири╕" },
    { icon: "ЁЯУЛ", title: "риХри╛риирйВрй░риирйА рикрйНри░риХри┐ри░ри┐риЖри╡ри╛риВ", desc: "ри╕ри╝ри┐риХри╛риЗрид рижри░риЬри╝ риХри░риири╛, рижри╕ридри╛ри╡рйЗриЬри╝рйАриХри░рии" },
    { icon: "ЁЯОп", title: "ри╣рй▒риХ риЕридрйЗ рилри╝ри░риЬри╝", desc: "риХри░риориЪри╛ри░рйА ри╣рй▒риХ риЕридрйЗ риЬри╝ри┐рй░риорйЗри╡ри╛ри░рйАриЖриВ" }
  ],
  ta: [
    { icon: "тЪЦя╕П", title: "родрпКро┤ро┐ро▓ро╛ро│ро░рпН роЙро░ро┐роорпИроХро│рпН", desc: "ро╡рпЗро▓рпИ роирпЗро░роорпН, роКродро┐ропроорпН, роиро┐рокроирпНродройрпИроХро│рпН" },
    { icon: "ЁЯПв", title: "ро╡рпЗро▓рпИро╡ро╛ропрпНрокрпНрокрпБ роЪроЯрпНроЯроорпН", desc: "рокрогро┐ропрооро░рпНродрпНродро▓рпН, рокрогро┐ роирпАроХрпНроХроорпН, роТрокрпНрокроирпНродроЩрпНроХро│рпН" },
    { icon: "ЁЯЫбя╕П", title: "рокрогро┐ропро┐роЯ рокро╛родрпБроХро╛рокрпНрокрпБ", desc: "родрпБройрпНрокрпБро▒рпБродрпНродро▓рпН, рокро╛роХрпБрокро╛роЯрпБ, рокро╛родрпБроХро╛рокрпНрокрпБ" },
    { icon: "ЁЯТ░", title: "роЗро┤рокрпНрокрпАроЯрпБ", desc: "роЪроорпНрокро│роорпН, роиройрпНроорпИроХро│рпН, рокрпЛройро╕рпН" },
    { icon: "ЁЯУЛ", title: "роЪроЯрпНроЯ роироЯрпИроорпБро▒рпИроХро│рпН", desc: "рокрпБроХро╛ро░рпН рокродро┐ро╡рпБ, роЖро╡рогрокрпНрокроЯрпБродрпНродро▓рпН" },
    { icon: "ЁЯОп", title: "роЙро░ро┐роорпИроХро│рпН рооро▒рпНро▒рпБроорпН роХроЯроорпИроХро│рпН", desc: "рокрогро┐ропро╛ро│ро░рпН роЙро░ро┐роорпИроХро│рпН рооро▒рпНро▒рпБроорпН рокрпКро▒рпБрокрпНрокрпБроХро│рпН" }
  ],
  te: [
    { icon: "тЪЦя╕П", title: "р░Хр░╛р░░р▒Нр░ор░┐р░Х р░╣р░Хр▒Нр░Хр▒Бр░▓р▒Б", desc: "р░кр░ир░┐ р░Чр░Вр░Яр░▓р▒Б, р░╡р▒Зр░др░ир░╛р░▓р▒Б, р░╖р░░р░др▒Бр░▓р▒Б" },
    { icon: "ЁЯПв", title: "р░Йр░жр▒Нр░пр▒Лр░Ч р░Ър░Яр▒Нр░Яр░В", desc: "р░ир░┐р░пр░╛р░ор░Хр░В, р░ор▒Бр░Чр░┐р░Вр░кр▒Б, р░Тр░кр▒Нр░кр░Вр░жр░╛р░▓р▒Б" },
    { icon: "ЁЯЫбя╕П", title: "р░Хр░╛р░░р▒Нр░пр░╛р░▓р░п р░нр░жр▒Нр░░р░д", desc: "р░╡р▒Зр░зр░┐р░Вр░кр▒Бр░▓р▒Б, р░╡р░┐р░╡р░Хр▒Нр░╖, р░нр░жр▒Нр░░р░д" },
    { icon: "ЁЯТ░", title: "р░кр░░р░┐р░╣р░╛р░░р░В", desc: "р░Ьр▒Ар░др░В, р░кр▒Нр░░р░пр▒Лр░Ьр░ир░╛р░▓р▒Б, р░мр▒Лр░ир░╕р▒Н" },
    { icon: "ЁЯУЛ", title: "р░Ър░Яр▒Нр░Яр░кр░░р░ор▒Ир░и р░╡р░┐р░зр░╛р░ир░╛р░▓р▒Б", desc: "р░лр░┐р░░р▒Нр░пр░╛р░жр▒Б р░жр░╛р░Цр░▓р▒Б р░Ър▒Зр░пр░бр░В, р░бр░╛р░Хр▒Нр░пр▒Бр░ор▒Жр░Вр░Яр▒Зр░╖р░ир▒Н" },
    { icon: "ЁЯОп", title: "р░╣р░Хр▒Нр░Хр▒Бр░▓р▒Б р░ор░░р░┐р░пр▒Б р░Хр░░р▒Нр░др░╡р▒Нр░пр░╛р░▓р▒Б", desc: "р░Йр░жр▒Нр░пр▒Лр░Чр░┐ р░╣р░Хр▒Нр░Хр▒Бр░▓р▒Б р░ор░░р░┐р░пр▒Б р░мр░╛р░зр▒Нр░пр░др░▓р▒Б" }
  ]
};

const TOPIC_HEADER = {
  en: "ЁЯПЫя╕П Legal Topics I Can Help With",
  hi: "ЁЯПЫя╕П рдореИрдВ рдЬрд┐рди рдХрд╛рдиреВрдиреА рд╡рд┐рд╖рдпреЛрдВ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ",
  bn: "ЁЯПЫя╕П ржЖржорж┐ ржпрзЗ ржЖржЗржирж┐ ржмрж┐рж╖ржпрж╝рзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐",
  gu: "ЁЯПЫя╕П рк╣рлБркВ ркЬрлЗ ркХрк╛ркирлВркирлА рк╡рк┐рк╖ркпрлЛркорк╛ркВ ркоркжркж ркХрк░рлА рк╢ркХрлБркВ ркЫрлБркВ",
  kn: "ЁЯПЫя╕П р▓ир▓╛р▓ир│Б р▓╕р▓╣р▓╛р▓п р▓ор▓╛р▓бр▓мр▓╣р│Бр▓жр▓╛р▓ж р▓Хр▓╛р▓ир│Вр▓ир│Б р▓╡р▓┐р▓╖р▓пр▓Чр▓│р│Б",
  ml: "ЁЯПЫя╕П р┤Ор┤ир┤┐р┤Хр╡Нр┤Хр╡Н р┤╕р┤╣р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤Хр┤┤р┤┐р┤пр╡Бр┤ир╡Нр┤и р┤ир┤┐р┤пр┤о р┤╡р┤┐р┤╖р┤пр┤Щр╡Нр┤Щр╡╛",
  mr: "ЁЯПЫя╕П рдореА рдЬреНрдпрд╛ рдХрд╛рдпрджреЗрд╢реАрд░ рд╡рд┐рд╖рдпрд╛рдВрдордзреНрдпреЗ рдорджрдд рдХрд░реВ рд╢рдХрддреЛ",
  pa: "ЁЯПЫя╕П риЬри┐риирйНри╣ри╛риВ риХри╛риирйВрй░риирйА ри╡ри┐ри╕ри╝ри┐риЖриВ ри╡ри┐рй▒риЪ риорйИриВ риорижриж риХри░ ри╕риХрижри╛ ри╣ри╛риВ",
  ta: "ЁЯПЫя╕П роиро╛ройрпН роЙродро╡роХрпНроХрпВроЯро┐роп роЪроЯрпНроЯ родро▓рпИрокрпНрокрпБроХро│рпН",
  te: "ЁЯПЫя╕П р░ир▒Зр░ир▒Б р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░Чр░▓ р░Ър░Яр▒Нр░Яр░кр░░р░ор▒Ир░и р░Ер░Вр░╢р░╛р░▓р▒Б"
};

const TOPIC_QUESTIONS = {
  en: "Tell me about",
  hi: "рдореБрдЭреЗ рдмрддрд╛рдПрдВ",
  bn: "ржЖржорж╛ржХрзЗ ржмрж▓рзБржи",
  gu: "ркоркирлЗ ркЬркгрк╛рк╡рлЛ",
  kn: "р▓ир▓ир▓Чр│Ж р▓╣р│Зр▓│р▓┐",
  ml: "р┤Ор┤ир╡Нр┤ир╡Лр┤Яр╡Н р┤кр┤▒р┤пр╡В",
  mr: "рдорд▓рд╛ рд╕рд╛рдВрдЧрд╛",
  pa: "риорйИриирйВрй░ рижрй▒ри╕рйЛ",
  ta: "роОройроХрпНроХрпБ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН",
  te: "р░ир░╛р░Хр▒Б р░Ър▒Жр░кр▒Нр░кр░Вр░бр░┐"
};

// Enhanced OpenAI Manager with better error handling
class OpenAIManager {
  private baseUrl: string;
  private retryCount: number = 0;
  private maxRetries: number = 3;

  constructor() {
    this.baseUrl = '/api/chat';
  }

  async createCompletion(messages: any[], options: any = {}): Promise<any> {
    for (let attempt = 0; attempt <= this.maxRetries; attempt++) {
      try {
        const response = await fetch(this.baseUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            messages,
            ...options,
          }),
        });

        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
        }

        return response.json();
      } catch (error) {
        if (attempt === this.maxRetries) {
          throw error;
        }
        // Wait before retrying (exponential backoff)
        await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 1000));
      }
    }
  }

  hasApiKeys(): boolean {
    return true;
  }

  getApiKeyCount(): number {
    return 1;
  }
}

const styles = `
  @keyframes slideInRight {
    from { transform: translateX(100%); opacity: 0; }
    to { transform: translateX(0); opacity: 1; }
  }

  @keyframes slideUp {
    from { transform: translateY(20px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
  }

  @keyframes slideIn {
    from { transform: translateY(10px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @keyframes bounce {
    0%, 20%, 53%, 80%, 100% { transform: translateY(0); }
    40%, 43% { transform: translateY(-8px); }
    70% { transform: translateY(-4px); }
    90% { transform: translateY(-2px); }
  }

  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
  }

  @keyframes glow {
    0%, 100% { box-shadow: 0 0 20px rgba(48, 70, 116, 0.3); }
    50% { box-shadow: 0 0 30px rgba(48, 70, 116, 0.6); }
  }

  @keyframes typing {
    0%, 60%, 100% { transform: translateY(0); }
    30% { transform: translateY(-10px); }
  }

  .animate-slide-in-right { animation: slideInRight 0.5s ease-out forwards; }
  .animate-slide-up { animation: slideUp 0.3s ease-out forwards; }
  .animate-slide-in { animation: slideIn 0.3s ease-out forwards; }
  .animate-fade-in { animation: fadeIn 0.3s ease-out forwards; }
  .animate-bounce-custom { animation: bounce 2s infinite; }
  .animate-pulse-custom { animation: pulse 2s infinite; }
  .animate-glow { animation: glow 2s infinite; }
  .animate-typing { animation: typing 1.4s infinite; }

  .gradient-border {
    background: linear-gradient(45deg, #304674, #1e3a5f, #4a6fa5, #2c5aa0);
    background-size: 400% 400%;
    animation: gradientShift 3s ease infinite;
  }

  @keyframes gradientShift {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
  }

  .glassmorphism {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .message-hover:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .scrollbar-thin::-webkit-scrollbar {
    width: 6px;
  }

  .scrollbar-thin::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 10px;
  }

  .scrollbar-thin::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 10px;
  }

  .scrollbar-thin::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
  }
`;

export default function EnhancedChatBot() {
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [isAudioEnabled, setIsAudioEnabled] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [selectedLanguage, setSelectedLanguage] = useState<string>('en');
  const [apiError, setApiError] = useState<string>('');
  const [showWelcomeMessage, setShowWelcomeMessage] = useState(true);
  const [showTopics, setShowTopics] = useState(true);
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  const openaiManager = useRef(new OpenAIManager());

  useEffect(() => {
    const timer = setTimeout(() => {
      setShowWelcomeMessage(false);
    }, 5000);
    return () => clearTimeout(timer);
  }, []);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    const timer = setTimeout(() => {
      setShowWelcomeMessage(false);
    }, 10000);
    return () => clearTimeout(timer);
  }, []);

  const speakText = (text: string) => {
    if (!isAudioEnabled || !window.speechSynthesis) return;

    window.speechSynthesis.cancel();
    const utterance = new SpeechSynthesisUtterance(text);

    const languageMap: { [key: string]: string } = {
      'en': 'en-IN', 'hi': 'hi-IN', 'bn': 'bn-IN', 'gu': 'gu-IN',
      'kn': 'kn-IN', 'ml': 'ml-IN', 'mr': 'mr-IN', 'pa': 'pa-IN',
      'ta': 'ta-IN', 'te': 'te-IN'
    };

    utterance.lang = languageMap[selectedLanguage] || 'en-IN';
    utterance.rate = 0.9;
    utterance.pitch = 1.1;
    utterance.volume = 0.8;

    const voices = window.speechSynthesis.getVoices();
    const voice = voices.find(v => v.lang.startsWith(selectedLanguage)) ||
      voices.find(v => v.lang.startsWith('en')) ||
      voices[0];

    if (voice) utterance.voice = voice;
    window.speechSynthesis.speak(utterance);
    if ('speechSynthesis' in window && isAudioEnabled) {
      // Remove markdown formatting for speech
      const cleanText = text.replace(/\*\*(.*?)\*\*/g, '$1').replace(/\*(.*?)\*/g, '$1');
      const utterance = new SpeechSynthesisUtterance(cleanText);
      utterance.rate = 0.8;
      utterance.pitch = 1;
      speechSynthesis.speak(utterance);
    }
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  const rateMessage = (messageId: string, rating: 'up' | 'down') => {
    setMessages(prev => prev.map(msg => 
      msg.id === messageId ? { ...msg, rating } : msg
    ));
  };

  const handleSend = async () => {
    if (!input.trim() || isLoading) return;
  
    const userMessage = input.trim();
    setInput('');
    setApiError('');
    setShowTopics(false);
  
    const userMsg: Message = {
      id: Date.now() + '_user',
      text: userMessage,
      isUser: true,
      timestamp: new Date(),
    };
  
    setMessages(prev => [...prev, userMsg]);
    setIsLoading(true);
    setIsTyping(true);
  
    try {
      // Make actual API call to your backend
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: userMessage,
          language: selectedLanguage
        }),
      });
  
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
      }
  
      const data = await response.json();
      
      if (!data.response) {
        throw new Error('No response received from the API');
      }
  
      const botMsg: Message = {
        id: Date.now() + '_bot',
        text: data.response,
        isUser: false,
        timestamp: new Date(),
      };
  
      setMessages(prev => [...prev, botMsg]);
  
      if (isAudioEnabled) {
        speakText(data.response);
      }
  
    } catch (error) {
      console.error('Error:', error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
  
      setApiError(errorMessage);
      
      // Show user-friendly error message based on error type
      let userErrorMessage = "I'm experiencing technical difficulties. Please try again in a moment.";
      
      if (errorMessage.includes('Failed to fetch') || errorMessage.includes('NetworkError')) {
        userErrorMessage = "Unable to connect to the service. Please check your internet connection and try again.";
      } else if (errorMessage.includes('503') || errorMessage.includes('Service Unavailable')) {
        userErrorMessage = "The service is temporarily unavailable. Please try again in a few moments.";
      } else if (errorMessage.includes('429') || errorMessage.includes('rate limit')) {
        userErrorMessage = "Too many requests. Please wait a moment before trying again.";
      } else if (errorMessage.includes('quota') || errorMessage.includes('billing')) {
        userErrorMessage = "The service is temporarily unavailable due to usage limits. Please try again later.";
      }
  
      setMessages(prev => [...prev, {
        id: Date.now() + '_error',
        text: userErrorMessage,
        isUser: false,
        timestamp: new Date(),
      }]);
    } finally {
      setIsLoading(false);
      setIsTyping(false);
    }
  };

  const clearChat = () => {
    setMessages([]);
    setShowTopics(true);
    setApiError('');
  };

  const currentQuestions = SAMPLE_QUESTIONS[selectedLanguage as keyof typeof SAMPLE_QUESTIONS] || SAMPLE_QUESTIONS.en;
  const currentLanguage = LANGUAGES.find(lang => lang.code === selectedLanguage);

// Markdown renderer component
const MarkdownRenderer = ({ text }) => {
  const renderMarkdown = (text) => {
    // Convert markdown to HTML
    let html = text
      // Bold text **text** or __text__
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/__(.*?)__/g, '<strong>$1</strong>')
      // Italic text *text* or _text_
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/_(.*?)_/g, '<em>$1</em>')
      // Code blocks ```code```
      .replace(/```([\s\S]*?)```/g, '<pre class="bg-gray-100 p-2 rounded text-sm overflow-x-auto"><code>$1</code></pre>')
      // Inline code `code`
      .replace(/`(.*?)`/g, '<code class="bg-gray-100 px-1 py-0.5 rounded text-sm">$1</code>')
      // Links [text](url)
      .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" class="text-blue-600 hover:underline" target="_blank" rel="noopener noreferrer">$1</a>')
      .replace(/\n/g, '<br/>')
      .replace(/^\* (.+)$/gm, '<li class="ml-4">тАв $1</li>')
      .replace(/^- (.+)$/gm, '<li class="ml-4">тАв $1</li>')
      .replace(/^\d+\. (.+)$/gm, '<li class="ml-4 list-decimal">$1</li>');

    return html;
  };

  return (
    <div 
      className="prose prose-sm max-w-none"
      dangerouslySetInnerHTML={{ __html: renderMarkdown(text) }}
    />
  );
};

const cn = (...classes) => classes.filter(Boolean).join(' ');

  return (
    <>
      <style>{styles}</style>
      <div className="fixed bottom-6 right-6 z-50 sm:bottom-6 sm:right-6 mt-16 sm:mt-0">
        {!isOpen ? (
          <div className="relative">
            <Button
              onClick={() => setIsOpen(true)}
              className="h-14 w-14 sm:h-16 sm:w-16 rounded-full bg-gradient-to-br from-[#304674] to-[#1e3a5f] hover:from-[#1e3a5f] hover:to-[#304674] text-white shadow-xl transition-transform duration-300 ease-in-out transform hover:scale-110 group animate-glow"
            >
              <Bot className="h-6 w-6 sm:h-8 sm:w-8 drop-shadow-md transition-transform duration-300 group-hover:scale-110 animate-bounce-custom" />
            </Button>
            
            {showWelcomeMessage && (
              <div className="absolute bottom-20 right-0 sm:bottom-24 sm:right-2">
                <div className="relative animate-slide-in-right">
                  <div className="bg-gradient-to-br from-[#304674]/90 to-[#1e3a5f]/90 backdrop-blur-lg rounded-2xl px-4 sm:px-6 py-3 sm:py-4 shadow-xl max-w-[280px] w-[90vw] sm:w-[300px] transition-transform transform hover:scale-105 border border-white/10">
                    <div className="flex items-center gap-2 mb-2">
                      <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                      <span className="text-white font-semibold text-sm">Legal Assistant Online</span>
                    </div>
                    <p className="text-white/90 text-sm leading-relaxed">
                      Hi there! ЁЯСЛ I'm your AI legal assistant.<br /> Need help with employment law or worker rights in India? Click to start!
                    </p>
                  </div>
                  <div className="absolute top-full right-10 w-0 h-0 border-l-8 border-r-8 border-t-8 border-l-transparent border-r-transparent border-t-[#1e3a5f]"></div>
                </div>
              </div>
            )}
          </div>
        ) : (
          <Card className={cn(
            "w-[calc(100vw-2rem)] sm:w-[380px] md:w-[420px] bg-white shadow-2xl rounded-2xl flex flex-col overflow-hidden animate-slide-up gradient-border",
            isMinimized ? "h-16" : "h-[calc(100vh-6rem)] sm:h-[700px]"
          )}>
            {/* Header */}
            <div className="p-3 sm:p-4 flex items-center justify-between bg-gradient-to-r from-[#304674] to-[#1e3a5f] text-white rounded-t-2xl">
              <div className="flex items-center gap-2 sm:gap-3">
                <div className="relative">
                  <Bot className="h-5 w-5 sm:h-6 sm:w-6" />
                  <div className="absolute -top-1 -right-1 w-2 h-2 sm:w-3 sm:h-3 bg-green-400 rounded-full animate-pulse-custom"></div>
                </div>
                <div>
                  <h3 className="font-bold text-base sm:text-lg">Legal Assistant AI</h3>
                  <p className="text-[10px] sm:text-xs text-white/80">
                    {currentLanguage?.flag} {currentLanguage?.name} тАв Online
                  </p>
                </div>
              </div>
              
              <div className="flex items-center gap-1 sm:gap-2">
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-7 w-7 sm:h-8 sm:w-8 text-white hover:bg-white/20 transition-colors"
                  onClick={() => setIsAudioEnabled(!isAudioEnabled)}
                  title={isAudioEnabled ? "Disable audio" : "Enable audio"}
                >
                  {isAudioEnabled ? <Volume2 className="h-3 w-3 sm:h-4 sm:w-4" /> : <VolumeX className="h-3 w-3 sm:h-4 sm:w-4" />}
                </Button>
                
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-7 w-7 sm:h-8 sm:w-8 text-white hover:bg-white/20 transition-colors"
                  onClick={() => setIsMinimized(!isMinimized)}
                  title={isMinimized ? "Maximize" : "Minimize"}
                >
                  {isMinimized ? <Maximize2 className="h-3 w-3 sm:h-4 sm:w-4" /> : <Minimize2 className="h-3 w-3 sm:h-4 sm:w-4" />}
                </Button>
                
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-7 w-7 sm:h-8 sm:w-8 text-white hover:bg-white/20 transition-colors"
                  onClick={() => setIsOpen(false)}
                  title="Close chat"
                >
                  <X className="h-3 w-3 sm:h-4 sm:w-4" />
                </Button>
              </div>
            </div>

            {!isMinimized && (
              <>
                {/* Language Selector */}
                <div className="p-3 sm:p-4 border-b bg-gradient-to-r from-gray-50 to-blue-50">
                  <div className="flex items-center justify-between mb-2 sm:mb-3">
                    <div className="flex items-center gap-2">
                      <Globe className="h-3 w-3 sm:h-4 sm:w-4 text-gray-600" />
                      <span className="text-xs sm:text-sm font-medium text-gray-700">Language</span>
                    </div>
                    {messages.length > 0 && (
                      <Button
                        variant="ghost"
                        size="sm"
                        className="text-[10px] sm:text-xs text-gray-600 hover:text-gray-800"
                        onClick={clearChat}
                      >
                        <RefreshCw className="h-3 w-3 mr-1" />
                        Clear Chat
                      </Button>
                    )}
                  </div>
                  
                  <select
                    value={selectedLanguage}
                    onChange={(e) => setSelectedLanguage(e.target.value)}
                    className="w-full p-2 sm:p-3 border border-gray-300 rounded-lg text-xs sm:text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-white"
                  >
                    {LANGUAGES.map((lang) => (
                      <option key={lang.code} value={lang.code}>
                        {lang.flag} {lang.name}
                      </option>
                    ))}
                  </select>
                </div>

                {/* Messages Area */}
                <div className="flex-1 overflow-y-auto p-3 sm:p-4 space-y-3 sm:space-y-4 bg-gradient-to-b from-gray-50 to-white scrollbar-thin">
                  {messages.length === 0 ? (
                    <div className="text-center space-y-6 animate-fade-in">
                      {/* Legal Topics */}
                      {showTopics && (
                        <div className="space-y-4">
                          <h4 className="text-lg font-semibold text-gray-800 mb-4">
                            {TOPIC_HEADER[selectedLanguage as keyof typeof TOPIC_HEADER]}
                          </h4>
                          <div className="grid grid-cols-2 gap-3">
                            {LEGAL_TOPICS[selectedLanguage as keyof typeof LEGAL_TOPICS].map((topic, index) => (
                              <div
                                key={index}
                                className="p-3 bg-white rounded-lg border border-gray-200 hover:border-blue-300 hover:shadow-md transition-all duration-200 cursor-pointer text-left"
                                onClick={() => setInput(`${TOPIC_QUESTIONS[selectedLanguage as keyof typeof TOPIC_QUESTIONS]} ${topic.title}`)}
                              >
                                <div className="text-lg mb-1">{topic.icon}</div>
                                <div className="text-sm font-medium text-gray-800">{topic.title}</div>
                                <div className="text-xs text-gray-600">{topic.desc}</div>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}

                      {/* Sample Questions */}
                      <div className="space-y-3">
                        <h4 className="text-sm font-medium text-gray-700">ЁЯТм Common Questions</h4>
                        <div className="space-y-2">
                          {currentQuestions.slice(0, 4).map((question, index) => (
                            <Button
                              key={index}
                              variant="outline"
                              className="w-full text-left text-sm py-3 px-4 border-blue-200 text-blue-700 hover:bg-blue-50 hover:border-blue-300 justify-start transition-all duration-200 hover:scale-[1.02] rounded-lg"
                              onClick={() => setInput(question)}
                            >
                              {question}
                            </Button>
                          ))}
                        </div>
                      </div>
                    </div>
                  ) : (
                    messages.map((message, index) => (
                      <div
                        key={message.id}
                        className={cn(
                          "flex animate-slide-in group",
                          message.isUser ? "justify-end" : "justify-start"
                        )}
                        style={{ animationDelay: `${index * 100}ms` }}
                      >
                        <div className="flex items-start gap-3 max-w-[85%]">
                          {!message.isUser && (
                            <div className="w-8 h-8 rounded-full bg-gradient-to-r from-[#304674] to-[#1e3a5f] flex items-center justify-center flex-shrink-0 mt-1">
                              <Bot className="h-4 w-4 text-white" />
                            </div>
                          )}
                          
                          <div className="flex-1">
                            <div
                              className={cn(
                                "rounded-2xl p-4 text-sm transition-all duration-200 message-hover",
                                message.isUser
                                  ? "bg-gradient-to-r from-[#304674] to-[#1e3a5f] text-white ml-auto"
                                  : "bg-white border border-gray-200 text-gray-800 shadow-sm"
                              )}
                            >
                             {message.isUser ? (
                                <p className="whitespace-pre-wrap leading-relaxed">{message.text}</p>
                              ) : (
                                <MarkdownRenderer text={message.text} />
                              )}
                              
                              {!message.isUser && (
                                <div className="flex items-center justify-between mt-3 pt-3 border-t border-gray-100">
                                  <div className="flex items-center gap-2">
                                    <Button
                                      variant="ghost"
                                      size="sm"
                                      className="h-7 px-2 text-xs opacity-70 hover:opacity-100"
                                      onClick={() => copyToClipboard(message.text)}
                                    >
                                      <Copy className="h-3 w-3 mr-1" />
                                      Copy
                                    </Button>
                                    
                                    <Button
                                      variant="ghost"
                                      size="sm"
                                      className="h-7 px-2 text-xs opacity-70 hover:opacity-100"
                                      onClick={() => speakText(message.text)}
                                    >
                                      <Volume2 className="h-3 w-3 mr-1" />
                                      Read
                                    </Button>
                                  </div>
                                  
                                  <div className="flex items-center gap-1">
                                    <Button
                                      variant="ghost"
                                      size="sm"
                                      className={cn(
                                        "h-7 w-7 p-0",
                                        message.rating === 'up' ? "text-green-600" : "text-gray-400 hover:text-green-600"
                                      )}
                                      onClick={() => rateMessage(message.id, 'up')}
                                    >
                                      <ThumbsUp className="h-3 w-3" />
                                    </Button>
                                    
                                    <Button
                                      variant="ghost"
                                      size="sm"
                                      className={cn(
                                        "h-7 w-7 p-0",
                                        message.rating === 'down' ? "text-red-600" : "text-gray-400 hover:text-red-600"
                                      )}
                                      onClick={() => rateMessage(message.id, 'down')}
                                    >
                                      <ThumbsDown className="h-3 w-3" />
                                    </Button>
                                  </div>
                                </div>
                              )}
                            </div>
                            
                            <div className="flex items-center gap-2 mt-1 text-xs text-gray-500">
                              {message.isUser ? (
                                <User className="h-3 w-3" />
                              ) : (
                                <Bot className="h-3 w-3" />
                              )}
                              <span>{message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>
                            </div>
                          </div>

                          {message.isUser && (
                            <div className="w-8 h-8 rounded-full bg-gradient-to-r from-blue-500 to-blue-600 flex items-center justify-center flex-shrink-0 mt-1">
                              <User className="h-4 w-4 text-white" />
                            </div>
                          )}
                        </div>
                      </div>
                    ))
                  )}
                  
                  {/* Typing Indicator */}
                  {isTyping && (
                    <div className="flex justify-start animate-fade-in">
                      <div className="flex items-start gap-3">
                        <div className="w-8 h-8 rounded-full bg-gradient-to-r from-[#304674] to-[#1e3a5f] flex items-center justify-center">
                          <Bot className="h-4 w-4 text-white" />
                        </div>
                        <div className="bg-white border border-gray-200 rounded-2xl px-4 py-3 shadow-sm">
                          <div className="flex items-center gap-1">
                            <div className="w-2 h-2 bg-gray-400 rounded-full animate-typing"></div>
                            <div className="w-2 h-2 bg-gray-400 rounded-full animate-typing" style={{ animationDelay: '0.2s' }}></div>
                            <div className="w-2 h-2 bg-gray-400 rounded-full animate-typing" style={{ animationDelay: '0.4s' }}></div>
                            <span className="ml-2 text-sm text-gray-600">AI is thinking...</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  <div ref={messagesEndRef} />
                </div>

                {/* Input Area */}
                <div className="p-3 sm:p-4 border-t bg-white">
                  <div className="flex gap-2 sm:gap-3">
                    <div className="flex-1 relative">
                      <input
                        ref={inputRef}
                        type="text"
                        value={input}
                        onChange={(e) => setInput(e.target.value)}
                        onKeyPress={(e) => e.key === 'Enter' && handleSend()}
                        placeholder="ЁЯТм Ask me anything about Indian labor law..."
                        className="w-full px-3 sm:px-4 py-2 sm:py-3 pr-10 sm:pr-12 border border-gray-300 rounded-xl text-xs sm:text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-white placeholder-gray-500"
                        disabled={isLoading}
                      />
                      
                      {input && (
                        <Button
                          variant="ghost"
                          size="icon"
                          className="absolute right-1 sm:right-2 top-1/2 transform -translate-y-1/2 h-6 w-6 sm:h-8 sm:w-8 text-gray-400 hover:text-gray-600"
                          onClick={() => setInput('')}
                        >
                          <X className="h-3 w-3 sm:h-4 sm:w-4" />
                        </Button>
                      )}
                    </div>
                    
                    <Button
                      onClick={handleSend}
                      disabled={!input.trim() || isLoading}
                      className="px-4 sm:px-6 py-2 sm:py-3 bg-gradient-to-r from-[#304674] to-[#1e3a5f] hover:from-[#1e3a5f] hover:to-[#304674] text-white rounded-xl transition-all duration-200 flex items-center gap-1 sm:gap-2 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed hover:scale-105 active:scale-95"
                    >
                      {isLoading ? (
                        <Loader2 className="h-3 w-3 sm:h-4 sm:w-4 animate-spin" />
                      ) : (
                        <Send className="h-3 w-3 sm:h-4 sm:w-4" />
                      )}
                      <span className="text-xs sm:text-sm font-medium">Send</span>
                    </Button>
                  </div>
                  
                  {/* Quick Actions */}
                  <div className="flex flex-col gap-2 mt-2 sm:mt-3">
                    <div className="flex items-center justify-between text-[10px] sm:text-xs">
                      <div className="flex items-center gap-1 sm:gap-2 text-gray-500">
                        <div className="flex items-center gap-1 sm:gap-1.5">
                          <div className="w-1.5 h-1.5 sm:w-2 sm:h-2 bg-green-400 rounded-full animate-pulse"></div>
                          <span>AI Assistant Online</span>
                        </div>
                        <span className="text-gray-400">тАв</span>
                        <span className="text-gray-500">Press Enter to send</span>
                      </div>
                    </div>
                    
                    <div className="flex items-center gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        className="flex-1 h-7 sm:h-8 text-[10px] sm:text-xs border-blue-200 text-blue-700 hover:bg-blue-50 hover:border-blue-300 transition-all duration-200"
                        onClick={() => setInput("What are my basic rights as an employee in India?")}
                      >
                        <span className="flex items-center gap-1 sm:gap-1.5">
                          <span className="text-sm sm:text-base">ЁЯТ╝</span>
                          <span>Employee Rights</span>
                        </span>
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        className="flex-1 h-7 sm:h-8 text-[10px] sm:text-xs border-blue-200 text-blue-700 hover:bg-blue-50 hover:border-blue-300 transition-all duration-200"
                        onClick={() => setInput("How do I file a complaint against workplace harassment?")}
                      >
                        <span className="flex items-center gap-1 sm:gap-1.5">
                          <span className="text-sm sm:text-base">ЁЯЫбя╕П</span>
                          <span>Harassment Help</span>
                        </span>
                      </Button>
                    </div>
                  </div>
                </div>
              </>
            )}
          </Card>
        )}
      </div>
    </>
  );
}