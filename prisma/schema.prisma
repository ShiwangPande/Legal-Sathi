// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Language {
  id            Int      @id @default(autoincrement())
  code          String   @unique @db.VarChar(10)
  name          String   @db.VarChar(100)
  nativeName    String   @map("native_name") @db.VarChar(100)
  flagEmoji      String   @default("ðŸ‡®ðŸ‡³") @map("flag_emoji") @db.VarChar(10)
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  founders      Founder[]
  teamMembers   TeamMember[]
  acknowledgements Acknowledgement[]
  categoryTranslations CategoryTranslation[]
  rights              Right[]
  siteTranslations    SiteTranslation[]

  @@map("languages")
}

model Category {
  id        Int      @id @default(autoincrement())
  key       String   @unique @db.VarChar(50)
  icon      String   @db.VarChar(10)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  translations CategoryTranslation[]
  rights       Right[]

  @@map("categories")
}

model CategoryTranslation {
  id           Int    @id @default(autoincrement())
  categoryId   Int    @map("category_id")
  languageCode String @map("language_code") @db.VarChar(10)
  name         String @db.VarChar(200)
  noInfo       String @db.VarChar(500)

  // Relations
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  language Language @relation(fields: [languageCode], references: [code], onDelete: Cascade)

  @@unique([categoryId, languageCode])
  @@map("category_translations")
}

model SiteTranslation {
  id           Int    @id @default(autoincrement())
  languageCode String @map("language_code") @db.VarChar(10)
  key          String @db.VarChar(200)
  value        String @db.Text

  // Relations
  language Language @relation(fields: [languageCode], references: [code], onDelete: Cascade)

  @@unique([languageCode, key])
  @@map("site_translations")
}

model Right {
  id           Int      @id @default(autoincrement())
  categoryId   Int      @map("category_id")
  languageCode String   @map("language_code") @db.VarChar(10)
  title        String   @db.VarChar(500)
  script       String   @db.Text
  audioUrl     String?  @map("audio_url") @db.VarChar(500)
  learnMoreUrl String?  @map("learn_more_url") @db.VarChar(500)
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  language Language @relation(fields: [languageCode], references: [code], onDelete: Cascade)

  @@map("rights")
}

model AdminUser {
  id           Int      @id @default(autoincrement())
  email        String   @unique @db.VarChar(255)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  name         String   @db.VarChar(100)
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("admin_users")
}

model Volunteer {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(200)
  email        String   @db.VarChar(255)
  organization String?  @db.VarChar(200)
  translations Boolean  @default(false)
  recordings   Boolean  @default(false)
  boards       Boolean  @default(false)
  installations Boolean @default(false)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("volunteers")
}

model Founder {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(200)
  title         String   @db.VarChar(200)
  bio           String   @db.Text
  imageUrl      String   @map("image_url") @db.VarChar(500)
  languageCode  String   @map("language_code") @db.VarChar(10)
  email         String?  @db.VarChar(255)
  contactNumber String?  @map("contact_number") @db.VarChar(20)
  socialLinks   Json?    // Store social media links as JSON
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  language      Language @relation(fields: [languageCode], references: [code], onDelete: Cascade)

  @@map("founders")
}

model TeamMember {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(200)
  role          String   @db.VarChar(200)
  bio           String   @db.Text
  imageUrl      String   @map("image_url") @db.VarChar(500)
  team          String   @db.VarChar(50) // content, design, or outreach
  languageCode  String   @map("language_code") @db.VarChar(10)
  email         String?  @db.VarChar(255)
  contactNumber String?  @map("contact_number") @db.VarChar(20)
  socialLinks   Json?    // Store social media links as JSON
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  language      Language @relation(fields: [languageCode], references: [code], onDelete: Cascade)

  @@map("team_members")
}

model Acknowledgement {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(200)
  contribution  String   @db.Text
  imageUrl      String?  @map("image_url") @db.VarChar(500)
  languageCode  String   @map("language_code") @db.VarChar(10)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  language      Language @relation(fields: [languageCode], references: [code], onDelete: Cascade)

  @@map("acknowledgements")
}