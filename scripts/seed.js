const { PrismaClient } = require("@prisma/client");
const bcrypt = require("bcryptjs");

const prisma = new PrismaClient();

async function main() {
  console.log("üå± Starting seed...");

  // Create languages
  const languages = await Promise.all([
    prisma.language.upsert({
      where: { code: "hi" },
      update: {},
      create: { code: "hi", name: "Hindi", nativeName: "‡§π‡§ø‡§Ç‡§¶‡•Ä", flagEmoji: "üáÆüá≥" },
    }),
    prisma.language.upsert({
      where: { code: "mr" },
      update: {},
      create: { code: "mr", name: "Marathi", nativeName: "‡§Æ‡§∞‡§æ‡§†‡•Ä", flagEmoji: "üáÆüá≥" },
    }),
    prisma.language.upsert({
      where: { code: "ta" },
      update: {},
      create: { code: "ta", name: "Tamil", nativeName: "‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç", flagEmoji: "üáÆüá≥" },
    }),
    prisma.language.upsert({
      where: { code: "te" },
      update: {},
      create: { code: "te", name: "Telugu", nativeName: "‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å", flagEmoji: "üáÆüá≥" },
    }),
    prisma.language.upsert({
      where: { code: "bn" },
      update: {},
      create: { code: "bn", name: "Bengali", nativeName: "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ", flagEmoji: "üáÆüá≥" },
    }),
    prisma.language.upsert({
      where: { code: "gu" },
      update: {},
      create: { code: "gu", name: "Gujarati", nativeName: "‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä", flagEmoji: "üáÆüá≥" },
    }),
    prisma.language.upsert({
      where: { code: "kn" },
      update: {},
      create: { code: "kn", name: "Kannada", nativeName: "‡≤ï‡≤®‡≥ç‡≤®‡≤°", flagEmoji: "üáÆüá≥" },
    }),
    prisma.language.upsert({
      where: { code: "ml" },
      update: {},
      create: { code: "ml", name: "Malayalam", nativeName: "‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç", flagEmoji: "üáÆüá≥" },
    }),
    prisma.language.upsert({
      where: { code: "pa" },
      update: {},
      create: { code: "pa", name: "Punjabi", nativeName: "‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä", flagEmoji: "üáÆüá≥" },
    }),
    prisma.language.upsert({
      where: { code: "en" },
      update: {},
      create: { code: "en", name: "English", nativeName: "English", flagEmoji: "üáÆüá≥" },
    }),
  ]);

  console.log("‚úÖ Languages created");

  // Create categories
  const categories = await Promise.all([
    prisma.category.upsert({
      where: { key: "wages-hours" },
      update: {},
      create: { key: "wages-hours", icon: "üí∞" },
    }),
    prisma.category.upsert({
      where: { key: "harassment" },
      update: {},
      create: { key: "harassment", icon: "üõë" },
    }),
    prisma.category.upsert({
      where: { key: "maternity" },
      update: {},
      create: { key: "maternity", icon: "üë∂" },
    }),
    prisma.category.upsert({
      where: { key: "safety" },
      update: {},
      create: { key: "safety", icon: "‚ö†Ô∏è" },
    }),
    prisma.category.upsert({
      where: { key: "child-labor" },
      update: {},
      create: { key: "child-labor", icon: "üö´" },
    }),
    prisma.category.upsert({
      where: { key: "notice-period" },
      update: {},
      create: { key: "notice-period", icon: "üìú" },
    }),
    prisma.category.upsert({
      where: { key: "govt-schemes" },
      update: {},
      create: { key: "govt-schemes", icon: "üèõÔ∏è" },
    }),
  ]);

  console.log("‚úÖ Categories created");

  // Multilingual category translations
  const translationsByLanguage = {
    hi: {
      "wages-hours": "‡§Æ‡§ú‡§¶‡•Ç‡§∞‡•Ä ‡§î‡§∞ ‡§ò‡§Ç‡§ü‡•á",
      harassment: "‡§â‡§§‡•ç‡§™‡•Ä‡§°‡§º‡§®",
      maternity: "‡§Æ‡§æ‡§§‡•É‡§§‡•ç‡§µ",
      safety: "‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ",
      "child-labor": "‡§¨‡§æ‡§≤ ‡§∂‡•ç‡§∞‡§Æ",
      "notice-period": "‡§®‡•ã‡§ü‡§ø‡§∏ ‡§Ö‡§µ‡§ß‡§ø",
      "govt-schemes": "‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç",
    },
    en: {
      "wages-hours": "Wages & Hours",
      harassment: "Harassment",
      maternity: "Maternity",
      safety: "Safety",
      "child-labor": "Child Labor",
      "notice-period": "Notice Period",
      "govt-schemes": "Govt Schemes",
    },
    mr: {
      "wages-hours": "‡§µ‡•á‡§§‡§® ‡§Ü‡§£‡§ø ‡§§‡§æ‡§∏",
      harassment: "‡§õ‡§≥‡§µ‡§£‡•Ç‡§ï",
      maternity: "‡§™‡•ç‡§∞‡§∏‡•Ç‡§§‡•Ä",
      safety: "‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ",
      "child-labor": "‡§¨‡§æ‡§≤‡§ï‡§æ‡§Æ‡§ó‡§æ‡§∞",
      "notice-period": "‡§∏‡•Ç‡§ö‡§®‡§æ ‡§ï‡§æ‡§≤‡§æ‡§µ‡§ß‡•Ä",
      "govt-schemes": "‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ",
    },
    ta: {
      "wages-hours": "‡Æä‡Æ§‡Æø‡ÆØ‡ÆÆ‡Øç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æ®‡Øá‡Æ∞‡Æô‡Øç‡Æï‡Æ≥‡Øç",
      harassment: "‡Æ§‡ØÜ‡Ææ‡Æ®‡Øç‡Æ§‡Æ∞‡Æµ‡ØÅ",
      maternity: "‡ÆÆ‡Ææ‡Æ§‡Æµ‡Æø‡Æü‡Ææ‡ÆØ‡Øç",
      safety: "‡Æ™‡Ææ‡Æ§‡ØÅ‡Æï‡Ææ‡Æ™‡Øç‡Æ™‡ØÅ",
      "child-labor": "‡Æï‡ØÅ‡Æ¥‡Æ®‡Øç‡Æ§‡Øà ‡Æµ‡Øá‡Æ≤‡Øà",
      "notice-period": "‡ÆÖ‡Æ±‡Æø‡Æµ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ ‡Æï‡Ææ‡Æ≤‡ÆÆ‡Øç",
      "govt-schemes": "‡ÆÖ‡Æ∞‡Æö‡ØÅ‡Æ§‡Øç ‡Æ§‡Æø‡Æü‡Øç‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øç",
    },
    te: {
      "wages-hours": "‡∞ú‡±Ä‡∞§‡∞æ‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞ó‡∞Ç‡∞ü‡∞≤‡±Å",
      harassment: "‡∞π‡∞ø‡∞Ç‡∞∏",
      maternity: "‡∞ó‡∞∞‡±ç‡∞≠‡∞µ‡∞§‡∞ø",
      safety: "‡∞≠‡∞¶‡±ç‡∞∞‡∞§",
      "child-labor": "‡∞™‡∞ø‡∞≤‡±ç‡∞≤‡∞≤ ‡∞ï‡±É‡∞∑‡∞ø",
      "notice-period": "‡∞®‡±ã‡∞ü‡±Ä‡∞∏‡±Å ‡∞ï‡∞æ‡∞≤‡∞Ç",
      "govt-schemes": "‡∞™‡±ç‡∞∞‡∞≠‡±Å‡∞§‡±ç‡∞µ ‡∞™‡∞•‡∞ï‡∞æ‡∞≤‡±Å",
    },
    bn: {
      "wages-hours": "‡¶Æ‡¶ú‡ßÅ‡¶∞‡¶ø ‡¶ì ‡¶∏‡¶Æ‡¶Ø‡¶º",
      harassment: "‡¶π‡¶Ø‡¶º‡¶∞‡¶æ‡¶®‡¶ø",
      maternity: "‡¶Æ‡¶æ‡¶§‡ßÉ‡¶§‡ßç‡¶¨",
      safety: "‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶§‡ßç‡¶§‡¶æ",
      "child-labor": "‡¶∂‡¶ø‡¶∂‡ßÅ ‡¶∂‡ßç‡¶∞‡¶Æ",
      "notice-period": "‡¶®‡ßã‡¶ü‡¶ø‡¶∂ ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶ï‡¶æ‡¶≤",
      "govt-schemes": "‡¶∏‡¶∞‡¶ï‡¶æ‡¶∞‡¶ø ‡¶™‡ßç‡¶∞‡¶ï‡¶≤‡ßç‡¶™",
    },
    gu: {
      "wages-hours": "‡™µ‡´á‡™§‡™® ‡™Ö‡™®‡´á ‡™ï‡™≤‡™æ‡™ï‡´ã",
      harassment: "‡™π‡´á‡™∞‡™æ‡™®‡™ó‡™§‡™ø",
      maternity: "‡™Æ‡™æ‡™§‡´É‡™§‡´ç‡™µ",
      safety: "‡™∏‡´Å‡™∞‡™ï‡´ç‡™∑‡™æ",
      "child-labor": "‡™¨‡™æ‡™≥ ‡™∂‡´ç‡™∞‡™Æ",
      "notice-period": "‡™®‡´ã‡™ü‡™ø‡™∏ ‡™™‡™ø‡™∞‡™ø‡™Ø‡™°",
      "govt-schemes": "‡™∏‡™∞‡™ï‡™æ‡™∞‡´Ä ‡™Ø‡´ã‡™ú‡™®‡™æ‡™ì",
    },
    kn: {
      "wages-hours": "‡≤µ‡≥á‡≤§‡≤®‡≤ó‡≤≥‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤ó‡≤Ç‡≤ü‡≥Ü‡≤ó‡≤≥‡≥Å",
      harassment: "‡≤π‡≤ø‡≤Ç‡≤∏‡≥Ü",
      maternity: "‡≤ó‡≤∞‡≥ç‡≤≠‡≤ß‡≤∞‡≤£‡≥Ü",
      safety: "‡≤≠‡≤¶‡≥ç‡≤∞‡≤§‡≥Ü",
      "child-labor": "‡≤Æ‡≤ï‡≥ç‡≤ï‡≤≥ ‡≤ï‡≤æ‡≤∞‡≥ç‡≤Æ‡≤ø‡≤ï‡≤∞‡≥Å",
      "notice-period": "‡≤∏‡≥Ç‡≤ö‡≤®‡≥Ü ‡≤Ö‡≤µ‡≤ß‡≤ø",
      "govt-schemes": "‡≤∏‡≤∞‡≥ç‡≤ï‡≤æ‡≤∞‡≤ø ‡≤Ø‡≥ã‡≤ú‡≤®‡≥Ü‡≤ó‡≤≥‡≥Å",
    },
    ml: {
      "wages-hours": "‡¥ú‡µã‡¥≥‡¥ø‡¥Ø‡µÅ‡¥Ç ‡¥Æ‡¥£‡¥ø‡¥ï‡µç‡¥ï‡µÇ‡¥±‡µÅ‡¥ï‡¥≥‡µÅ‡¥Ç",
      harassment: "‡¥™‡µÄ‡¥°‡¥®‡¥Ç",
      maternity: "‡¥ó‡¥∞‡µç‚Äç‡¥≠‡¥ß‡¥æ‡¥∞‡¥£‡¥Ç",
      safety: "‡¥∏‡µÅ‡¥∞‡¥ï‡µç‡¥∑",
      "child-labor": "‡¥ï‡µÅ‡¥ü‡µç‡¥ü‡¥ø‡¥ï‡¥≥‡µç‚Äç ‡¥ú‡µã‡¥≤‡¥ø",
      "notice-period": "‡¥Ö‡¥±‡¥ø‡¥Ø‡¥ø‡¥™‡µç‡¥™‡µç ‡¥ï‡¥æ‡¥≤‡¥Ç",
      "govt-schemes": "‡¥∏‡¥∞‡µç‚Äç‡¥ï‡µç‡¥ï‡¥æ‡¥∞‡µç‚Äç ‡¥™‡¥¶‡µç‡¥ß‡¥§‡¥ø‡¥ï‡¥≥‡µç‚Äç",
    },
    pa: {
      "wages-hours": "‡®µ‡©á‡®§‡®® ‡®§‡©á ‡®ò‡©∞‡®ü‡©á",
      harassment: "‡®π‡©à‡®∞‡®æ‡®∏‡®Æ‡©à‡®Ç‡®ü",
      maternity: "‡®Æ‡®æ‡®§‡®æ ‡®¨‡®£‡®®",
      safety: "‡®∏‡©Å‡®∞‡©±‡®ñ‡®ø‡®Ü",
      "child-labor": "‡®¨‡©±‡®ö‡®ø‡®Ü‡®Ç ‡®¶‡©Ä ‡®Æ‡®ø‡®π‡®®‡®§",
      "notice-period": "‡®®‡©ã‡®ü‡®ø‡®∏ ‡®Ö‡®µ‡®ß‡©Ä",
      "govt-schemes": "‡®∏‡®∞‡®ï‡®æ‡®∞‡©Ä ‡®∏‡®ï‡©Ä‡®Æ‡®æ‡®Ç",
    },
  };

  for (const [langCode, translations] of Object.entries(translationsByLanguage)) {
    for (const [categoryKey, name] of Object.entries(translations)) {
      const category = categories.find((c) => c.key === categoryKey);
      if (category) {
        await prisma.categoryTranslation.upsert({
          where: {
            categoryId_languageCode: {
              categoryId: category.id,
              languageCode: langCode,
            },
          },
          update: {},
          create: {
            categoryId: category.id,
            languageCode: langCode,
            name,
          },
        });
      }
    }
  }

  console.log("‚úÖ All category translations created");

  // Sample rights
  const wagesCategory = categories.find((c) => c.key === "wages-hours");
  const safetyCategory = categories.find((c) => c.key === "safety");
  const harassmentCategory = categories.find((c) => c.key === "harassment");

  if (wagesCategory && safetyCategory && harassmentCategory) {
    await Promise.all([
      prisma.right.upsert({
        where: { id: 1 },
        update: {},
        create: {
          categoryId: wagesCategory.id,
          languageCode: "hi",
          title: "‡§®‡•ç‡§Ø‡•Ç‡§®‡§§‡§Æ ‡§Æ‡§ú‡§¶‡•Ç‡§∞‡•Ä ‡§ï‡§æ ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞",
          script:
            "‡§Ü‡§™‡§ï‡•ã ‡§ï‡§æ‡§®‡•Ç‡§® ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§®‡•ç‡§Ø‡•Ç‡§®‡§§‡§Æ ‡§Æ‡§ú‡§¶‡•Ç‡§∞‡•Ä ‡§™‡§æ‡§®‡•á ‡§ï‡§æ ‡§™‡•Ç‡§∞‡§æ ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§π‡•à‡•§ ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§Æ‡§æ‡§≤‡§ø‡§ï ‡§Ü‡§™‡§ï‡•ã ‡§á‡§∏‡§∏‡•á ‡§ï‡§Æ ‡§™‡•à‡§∏‡•á ‡§®‡§π‡•Ä‡§Ç ‡§¶‡•á ‡§∏‡§ï‡§§‡§æ‡•§ ‡§Ö‡§ó‡§∞ ‡§ï‡•ã‡§à ‡§ï‡§Æ ‡§™‡•à‡§∏‡•á ‡§¶‡•á‡§§‡§æ ‡§π‡•à ‡§§‡•ã ‡§Ü‡§™ ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§",
        },
      }),
      prisma.right.upsert({
        where: { id: 2 },
        update: {},
        create: {
          categoryId: safetyCategory.id,
          languageCode: "hi",
          title: "‡§ï‡§æ‡§∞‡•ç‡§Ø‡§∏‡•ç‡§•‡§≤ ‡§™‡§∞ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ",
          script:
            "‡§Ü‡§™‡§ï‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§ú‡§ó‡§π ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§π‡•ã‡§®‡•Ä ‡§ö‡§æ‡§π‡§ø‡§è‡•§ ‡§Æ‡§æ‡§≤‡§ø‡§ï ‡§ï‡•ã ‡§Ü‡§™‡§ï‡•ã ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ï‡•á ‡§∏‡§æ‡§Æ‡§æ‡§® ‡§¶‡•á‡§®‡•á ‡§π‡•ã‡§Ç‡§ó‡•á ‡§ú‡•à‡§∏‡•á ‡§π‡•á‡§≤‡§Æ‡•á‡§ü, ‡§¶‡§∏‡•ç‡§§‡§æ‡§®‡•á‡•§ ‡§Ö‡§ó‡§∞ ‡§ï‡§æ‡§Æ ‡§ñ‡§§‡§∞‡§®‡§æ‡§ï ‡§π‡•à ‡§§‡•ã ‡§Ü‡§™ ‡§Æ‡§®‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§",
        },
      }),
      prisma.right.upsert({
        where: { id: 3 },
        update: {},
        create: {
          categoryId: harassmentCategory.id,
          languageCode: "hi",
          title: "‡§â‡§§‡•ç‡§™‡•Ä‡§°‡§º‡§® ‡§∏‡•á ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ",
          script:
            "‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§Ü‡§™‡§ï‡•ã ‡§™‡§∞‡•á‡§∂‡§æ‡§® ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ‡•§ ‡§Ö‡§ó‡§∞ ‡§ï‡•ã‡§à ‡§ó‡§≤‡§§ ‡§¨‡§æ‡§§ ‡§ï‡§π‡§§‡§æ ‡§π‡•à ‡§Ø‡§æ ‡§õ‡•Ç‡§§‡§æ ‡§π‡•à ‡§§‡•ã ‡§Ø‡§π ‡§ó‡§≤‡§§ ‡§π‡•à‡•§ ‡§Ü‡§™ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§",
        },
      }),
    ]);
  }

  console.log("‚úÖ Sample rights created");

  // Create admin user
  const hashedPassword = await bcrypt.hash("admin123", 10);
  await prisma.adminUser.upsert({
    where: { email: "admin@legalsaathi.com" },
    update: {},
    create: {
      email: "admin@legalsaathi.com",
      passwordHash: hashedPassword,
      name: "Admin User",
    },
  });

  console.log("‚úÖ Admin user created");
  console.log("üéâ Seed completed successfully!");
}

main()
  .catch((e) => {
    console.error("‚ùå Seed failed:", e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
